local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/MlFrvWM/BBLT81/main/BL81827TC", true))()

local window = library:AddWindow("Sad v1.0.0 | Farming", {
    main_color = Color3.fromRGB(20, 82, 24),
    min_size = Vector2.new(550, 500),
    can_resize = false,
})

local tabFarming = window:AddTab("Farming")

tabFarming:AddLabel("Fast Farming").TextSize = 25

local player = game.Players.LocalPlayer
local muscleEvent = player:WaitForChild("muscleEvent")
local runFastRep = false
local repsPerTick = 1

local function getPing()
    local stats = game:GetService("Stats")
    local pingStat = stats:FindFirstChild("PerformanceStats") and stats.PerformanceStats:FindFirstChild("Ping")
    return pingStat and pingStat:GetValue() or 0
end

tabFarming:AddTextBox("Rep Speed", function(value)
    local num = tonumber(value)
    if num and num > 0 then
        repsPerTick = math.floor(num)
    end
end, {
    placeholder = "1",
})

local function fastRepLoop()
    while runFastRep do
        local startTime = tick()
        while tick() - startTime < 0.75 and runFastRep do
            for i = 1, repsPerTick do
                muscleEvent:FireServer("rep")
            end
            task.wait(0.02)
        end

        while runFastRep and getPing() >= 100 do
            task.wait(1)
        end
    end
end

tabFarming:AddSwitch("Fast Rep", function(state)
    runFastRep = state
    if runFastRep then
        task.spawn(fastRepLoop)
    else
        print("")
    end
end)


tabFarming:AddSwitch("Hide Pop Ups", function(bool)
    local rSto = game:GetService("ReplicatedStorage")
    for _, obj in pairs(rSto:GetChildren()) do
        if obj.Name:match("Frame$") then
            obj.Visible = not bool
        end
    end
end)

local VIM = game:GetService("VirtualInputManager")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local function pressE()
    VIM:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VIM:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while getgenv().working do
        LocalPlayer.muscleEvent:FireServer("rep")
        task.wait()
    end
end

local function teleportAndStart(position)
    local character = LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        character.HumanoidRootPart.CFrame = position
        task.wait(0.1)
        pressE()
        getgenv().working = true
        task.spawn(autoLift)
    end
end

tabFarming:AddSwitch("Auto Jungle", function()
    getgenv().working = false
    teleportAndStart(CFrame.new(-8352, 34, 2878))
end)

local autoEatEnabled = false

local function eatProteinEgg()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    local egg = backpack:FindFirstChild("Protein Egg")
    if egg then
        egg.Parent = character
        pcall(function()
            egg:Activate()
        end)
    end
end

task.spawn(function()
    while true do
        if autoEatEnabled then
            eatProteinEgg()
            task.wait(1800)
        else
            task.wait(1)
        end
    end
end)

tabFarming:AddSwitch("Auto Egg", function(state)
    autoEatEnabled = state
end)

local antiLagButton = tabFarming:AddButton("Anti Lag", function()
    local player = game.Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")
    local lighting = game:GetService("Lighting")

    for _, gui in pairs(playerGui:GetChildren()) do
        if gui:IsA("ScreenGui") then
            gui:Destroy()
        end
    end

    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("ParticleEmitter") or obj:IsA("PointLight") or obj:IsA("SpotLight") or obj:IsA("SurfaceLight") then
            obj:Destroy()
        end
    end

    for _, v in pairs(lighting:GetChildren()) do
        if v:IsA("Sky") then v:Destroy() end
    end
    local darkSky = Instance.new("Sky")
    darkSky.SkyboxBk, darkSky.SkyboxDn, darkSky.SkyboxFt = "rbxassetid://0", "rbxassetid://0", "rbxassetid://0"
    darkSky.SkyboxLf, darkSky.SkyboxRt, darkSky.SkyboxUp = "rbxassetid://0", "rbxassetid://0", "rbxassetid://0"
    darkSky.Parent = lighting

    lighting.Brightness = 0
    lighting.ClockTime = 0
    lighting.Ambient = Color3.new(0,0,0)
end)
antiLagButton.TextColor3 = Color3.fromRGB(255, 255, 255)

tabFarming:AddLabel("Pets").TextSize = 25

tabFarming:AddButton("Equip Swift Samurai", function()
    local petsFolder = game.Players.LocalPlayer.petsFolder

    for _, folder in pairs(petsFolder:GetChildren()) do
        if folder:IsA("Folder") then
            for _, pet in pairs(folder:GetChildren()) do
                game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("unequipPet", pet)
            end
        end
    end
    task.wait(0.2)

    local petsToEquip = {}
    for _, pet in pairs(petsFolder.Unique:GetChildren()) do
        if pet.Name == "Swift Samurai" then
            table.insert(petsToEquip, pet)
        end
    end

    for i = 1, math.min(8, #petsToEquip) do
        game:GetService("ReplicatedStorage").rEvents.equipPetEvent:FireServer("equipPet", petsToEquip[i])
        task.wait(0.1)
    end
end)

tabFarming:AddLabel("Misc").TextSize = 25

local antiAFKEnabled = true
tabFarming:AddSwitch("Anti AFK", function(bool)
    antiAFKEnabled = bool
    
    if bool then
        setupAntiAFK()
    else
        if antiAFKConnection then
            antiAFKConnection:Disconnect()
            antiAFKConnection = nil
            print("Anti-AFK system disabled")
        end
    end
end, true)

tabFarming:AddSwitch("Auto Fortune Wheel", function(Value)
    _G.autoFortuneWheelActive = Value
    if Value then
        local function openFortuneWheel()
            while _G.autoFortuneWheelActive do
                local args = {
                    [1] = "openFortuneWheel",
                    [2] = game:GetService("ReplicatedStorage"):WaitForChild("fortuneWheelChances"):WaitForChild("Fortune Wheel")
                }
                game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openFortuneWheelRemote"):InvokeServer(unpack(args))
                wait(0)
            end
        end
        coroutine.wrap(openFortuneWheel)()
    else
        _G.autoFortuneWheelActive = false
    end
end)

local autoEatBoostsEnabled = false

local boostsList = {
    "ULTRA Shake",
    "TOUGH Bar",
    "Protein Shake",
    "Energy Shake",
    "Protein Bar",
    "Energy Bar",
    "Tropical Shake"
}

local function eatAllBoosts()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()

    for _, boostName in ipairs(boostsList) do
        local boost = backpack:FindFirstChild(boostName)
        while boost do
            boost.Parent = character
            pcall(function()
                boost:Activate()
            end)
            task.wait(0)
            boost = backpack:FindFirstChild(boostName)
        end
    end
end

task.spawn(function()
    while true do
        if autoEatBoostsEnabled then
            eatAllBoosts()
            task.wait(2)
        else
            task.wait(1)
        end
    end
end)

tabFarming:AddSwitch("Eat Items", function(state)
    autoEatBoostsEnabled = state
end)

local stats = window:AddTab("Stats")

local player = game.Players.LocalPlayer
local leaderstats = player:WaitForChild("leaderstats")
local strengthStat = leaderstats:WaitForChild("Strength")
local rebirthsStat = leaderstats:WaitForChild("Rebirths")
local durabilityStat = player:WaitForChild("Durability")
local killsStat = leaderstats:WaitForChild("Kills")
local agilityStat = player:WaitForChild("Agility")
local evilKarmaStat = player:WaitForChild("evilKarma")
local goodKarmaStat = player:WaitForChild("goodKarma")
local brawlsStat = leaderstats:WaitForChild("Brawls")

local function AbbrevNumber(num)
    local abbrev = {"", "K", "M", "B", "T", "Qa", "Qi"}
    local i = 1
    while num >= 1000 and i < #abbrev do
        num = num / 1000
        i = i + 1
    end
    return string.format("%.2f%s", num, abbrev[i])
end

local function FormatWithCommas(num)
    local formatted = tostring(math.floor(num))
    while true do  
        local k
        formatted, k = formatted:gsub("^(-?%d+)(%d%d%d)", "%1,%2")
        if k == 0 then break end
    end
    return formatted
end

local function FormatNumber(num)
    return FormatWithCommas(num) .. " (" .. AbbrevNumber(num) .. ")"
end

stats:AddLabel("⏱️ Session Statistics").TextSize = 30

local stopwatchLabel = stats:AddLabel("Session Time: 0d 0h 0m 0s")
stopwatchLabel.TextSize = 20

local customTimerLabel = stats:AddLabel("Custom Timer: Not started")
customTimerLabel.TextSize = 20

local isCustomRunning = false
local customStart = 0
local customElapsed = 0

stats:AddButton("Start/Stop Custom Timer", function()
    if not isCustomRunning then
        isCustomRunning = true
        customStart = tick() - customElapsed
    else
        isCustomRunning = false
        customElapsed = tick() - customStart
    end
end)

stats:AddButton("Reset Custom Timer", function()
    isCustomRunning = false
    customStart = 0
    customElapsed = 0
    customTimerLabel.Text = "Custom Timer: Not started"
end)

local resetSession = false
stats:AddButton("Reset Session Stats", function()
    resetSession = true
end)

stats:AddLabel("------------------").TextSize = 14

stats:AddLabel("📊 Leaderboard Stats").TextSize = 30

local strengthLabel = stats:AddLabel("Strength: -")
strengthLabel.TextSize = 20
local rebirthsLabel = stats:AddLabel("Rebirths: -")
rebirthsLabel.TextSize = 20
local killsLabel = stats:AddLabel("Kills: -")
killsLabel.TextSize = 20
local brawlsLabel = stats:AddLabel("Brawls: -")
brawlsLabel.TextSize = 20

stats:AddLabel("------------------").TextSize = 14

stats:AddLabel("💪 Player Stats").TextSize = 30

local goodKarmaLabel = stats:AddLabel("Good Karma: -")
goodKarmaLabel.TextSize = 20
local evilKarmaLabel = stats:AddLabel("Evil Karma: -")
evilKarmaLabel.TextSize = 20
local durabilityLabel = stats:AddLabel("Durability: -")
durabilityLabel.TextSize = 20
local agilityLabel = stats:AddLabel("Agility: -")
agilityLabel.TextSize = 20

stats:AddLabel("------------------").TextSize = 14

stats:AddLabel("Projected Strength").TextSize = 30

local projectedStrengthLabel = stats:AddLabel("Strength Pace: -")
projectedStrengthLabel.TextSize = 20
local projectedDurabilityLabel = stats:AddLabel("Durability Pace: -")
projectedDurabilityLabel.TextSize = 20
local projectedRebirthsLabel = stats:AddLabel("Rebirth Pace: -")
projectedRebirthsLabel.TextSize = 20

local startTime = tick()
local initialStrength = strengthStat.Value
local initialDurability = durabilityStat.Value
local initialRebirths = rebirthsStat.Value
local initialKills = killsStat.Value
local initialAgility = agilityStat.Value
local initialEvilKarma = evilKarmaStat.Value
local initialGoodKarma = goodKarmaStat.Value
local initialBrawls = brawlsStat.Value

task.spawn(function()
    local lastUpdate = 0
    while task.wait(0.2) do
        local elapsedTime = tick() - startTime
        local days = math.floor(elapsedTime / (24 * 3600))
        local hours = math.floor((elapsedTime % (24 * 3600)) / 3600)
        local minutes = math.floor((elapsedTime % 3600) / 60)
        local seconds = math.floor(elapsedTime % 60)
        stopwatchLabel.Text = string.format("Session Time: %dd %dh %dm %ds", days, hours, minutes, seconds)

        if isCustomRunning then
            customElapsed = tick() - customStart
        end
        if customElapsed > 0 then
            local d = math.floor(customElapsed / (24 * 3600))
            local h = math.floor((customElapsed % (24 * 3600)) / 3600)
            local m = math.floor((customElapsed % 3600) / 60)
            local s = math.floor(customElapsed % 60)
            customTimerLabel.Text = string.format("Custom Timer: %dd %dh %dm %ds", d, h, m, s)
        end

        if resetSession then
            startTime = tick()
            initialStrength = strengthStat.Value
            initialDurability = durabilityStat.Value
            initialRebirths = rebirthsStat.Value
            initialKills = killsStat.Value
            initialAgility = agilityStat.Value
            initialEvilKarma = evilKarmaStat.Value
            initialGoodKarma = goodKarmaStat.Value
            initialBrawls = brawlsStat.Value
            resetSession = false
        end

        local currentStrength = strengthStat.Value
        local currentRebirths = rebirthsStat.Value
        local currentDurability = durabilityStat.Value
        local currentKills = killsStat.Value
        local currentAgility = agilityStat.Value
        local currentEvilKarma = evilKarmaStat.Value
        local currentGoodKarma = goodKarmaStat.Value
        local currentBrawls = brawlsStat.Value

        local sessionStrengthDelta = currentStrength - initialStrength
        local sessionDurabilityDelta = currentDurability - initialDurability
        local sessionRebirthsDelta = currentRebirths - initialRebirths
        local sessionKillsDelta = currentKills - initialKills
        local sessionAgilityDelta = currentAgility - initialAgility
        local sessionEvilKarmaDelta = currentEvilKarma - initialEvilKarma
        local sessionGoodKarmaDelta = currentGoodKarma - initialGoodKarma
        local sessionBrawlsDelta = currentBrawls - initialBrawls

        strengthLabel.Text = "Strength: " .. FormatNumber(currentStrength) .. " | Gained: " .. FormatNumber(sessionStrengthDelta)
        rebirthsLabel.Text = "Rebirths: " .. FormatNumber(currentRebirths) .. " | Gained: " .. FormatNumber(sessionRebirthsDelta)
        killsLabel.Text = "Kills: " .. FormatNumber(currentKills) .. " | Gained: " .. FormatNumber(sessionKillsDelta)
        brawlsLabel.Text = "Brawls: " .. FormatNumber(currentBrawls) .. " | Gained: " .. FormatNumber(sessionBrawlsDelta)

        goodKarmaLabel.Text = "Good Karma: " .. FormatNumber(currentGoodKarma) .. " | Gained: " .. FormatNumber(sessionGoodKarmaDelta)
        evilKarmaLabel.Text = "Evil Karma: " .. FormatNumber(currentEvilKarma) .. " | Gained: " .. FormatNumber(sessionEvilKarmaDelta)
        durabilityLabel.Text = "Durability: " .. FormatNumber(currentDurability) .. " | Gained: " .. FormatNumber(sessionDurabilityDelta)
        agilityLabel.Text = "Agility: " .. FormatNumber(currentAgility) .. " | Gained: " .. FormatNumber(sessionAgilityDelta)

        if tick() - lastUpdate >= 6 then
            lastUpdate = tick()
            local strengthPerSec = sessionStrengthDelta / elapsedTime
            local durabilityPerSec = sessionDurabilityDelta / elapsedTime
            local rebirthsPerSec = sessionRebirthsDelta / elapsedTime

            local secondsPerHour = 3600
            local secondsPerDay = 86400

            local strengthHour = math.floor(strengthPerSec * secondsPerHour)
            local strengthDay = math.floor(strengthPerSec * secondsPerDay)
            local durabilityHour = math.floor(durabilityPerSec * secondsPerHour)
            local durabilityDay = math.floor(durabilityPerSec * secondsPerDay)
            local rebirthsHour = math.floor(rebirthsPerSec * secondsPerHour)
            local rebirthsDay = math.floor(rebirthsPerSec * secondsPerDay)

            projectedStrengthLabel.Text = "Strength Pace: " .. FormatNumber(strengthHour) .. "/Hour | " .. FormatNumber(strengthDay) .. "/Day"
            projectedDurabilityLabel.Text = "Durability Pace: " .. FormatNumber(durabilityHour) .. "/Hour | " .. FormatNumber(durabilityDay) .. "/Day"
            projectedRebirthsLabel.Text = "Rebirth Pace: " .. FormatNumber(rebirthsHour) .. "/Hour | " .. FormatNumber(rebirthsDay) .. "/Day"
        end
    end
end)
